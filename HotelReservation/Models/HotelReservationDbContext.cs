// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace HotelReservation.Models;

public partial class HotelReservationDbContext : DbContext
{
    public HotelReservationDbContext(DbContextOptions<HotelReservationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MealPlan> MealPlans { get; set; }

    public virtual DbSet<MealPlanRate> MealPlanRates { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    public virtual DbSet<RoomRate> RoomRates { get; set; }

    public virtual DbSet<RoomType> RoomTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MealPlan>(entity =>
        {
            entity.Property(e => e.MealPlanName).IsFixedLength();
        });

        modelBuilder.Entity<MealPlanRate>(entity =>
        {
            entity.HasOne(d => d.MealPlan).WithMany(p => p.MealPlanRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MealPlanRates_MealPlans");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasOne(d => d.MealPlan).WithMany(p => p.Reservations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_MealPlans");

            entity.HasOne(d => d.RoomType).WithMany(p => p.Reservations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_RoomTypes");
        });

        modelBuilder.Entity<RoomRate>(entity =>
        {
            entity.HasOne(d => d.RoomType).WithMany(p => p.RoomRates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomRates_RoomTypes");
        });

        modelBuilder.Entity<RoomType>(entity =>
        {
            entity.Property(e => e.RoomTypeName).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}